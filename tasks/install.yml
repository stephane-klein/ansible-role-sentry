---
- name: Create {{ sentry_project_path }} directory
  file:
    path: "{{ sentry_project_path }}"
    state: directory

- name: Upload docker-compose.yml to {{ sentry_project_path }}/docker-compose.yml
  template:
    src: "docker-compose.yml.j2"
    dest: "{{ sentry_project_path }}/docker-compose.yml"

- name: Upload docker-compose-tools.yml to {{ sentry_project_path }}/docker-compose-tools.yml
  template:
    src: "docker-compose-tools.yml.j2"
    dest: "{{ sentry_project_path }}/docker-compose-tools.yml"

- name: Upload sentry-config.yml to {{ sentry_project_path }}/sentry-config.yml
  template:
    src: sentry-config.yml.j2
    dest: "{{ sentry_project_path }}/sentry-config.yml"

- name: Check if sentry_secret_key file exists
  stat:
    path: "{{ sentry_project_path }}/sentry_secret_key"
  register: sentry_secret_key_file_result

- name: Generate SENTRY_SECRET_KEY
  docker_container:
    name: sentry
    image: sentry:9.0.0
    command: sentry config generate-secret-key
    restart_policy: no
    cleanup: yes
    detach: false
  register: generate_sentry_secret_key
  when: not sentry_secret_key_file_result.stat.exists

- name: Write SENTRY_SECRET_KEY to {{ sentry_project_path }}/sentry_secret_key
  copy:
    content: "{{ generate_sentry_secret_key }}"
    dest: "{{ sentry_project_path }}/sentry_secret_key"
  when: not sentry_secret_key_file_result.stat.exists

- name: Read {{ sentry_project_path }}/sentry_secret_key file content
  slurp:
    src: "{{ sentry_project_path }}/sentry_secret_key"
  register: sentry_secret_key

- name: Upload env-sentry to {{ sentry_project_path }}/env-sentry
  template:
    src: env-sentry.j2
    dest: "{{ sentry_project_path }}/env-sentry"

- name: Pull all Docker images
  command: docker-compose pull
  args:
    chdir: "{{ sentry_project_path }}"
  changed_when: False


- name: Start Redis and PostgreSQL services
  docker_compose:
    project_src: "{{ sentry_project_path }}"
    services:
      - redis
      - postgres
    state: present
    pull: yes
    recreate: smart

- name: Wait PostgreSQL service start
  command: docker-compose -f docker-compose-tools.yml run --rm wait_postgres
  args:
    chdir: "{{ sentry_project_path }}"
  changed_when: False

- name: Wait Redis service start
  command: docker-compose -f docker-compose-tools.yml run --rm wait_redis
  args:
    chdir: "{{ sentry_project_path }}"
  changed_when: False

# There is "pip uninstall sentry-plugins" here to fix this bug https://github.com/getsentry/sentry/issues/11302
- name: Init or upgrade Sentry Database
  shell: docker-compose run --rm sentry bash -c "pip uninstall sentry-plugins -y; sentry upgrade --noinput"
  args:
    chdir: "{{ sentry_project_path }}"
  changed_when: False

- name: Create Sentry admin user
  shell: >
    docker-compose run --rm sentry sentry createuser
    --email {{ sentry_admin_user }}
    --password {{ sentry_admin_password }}
    --superuser
    --no-input &&
    touch .ansible_admin_user_created
  args:
    chdir: "{{ sentry_project_path }}"
    creates: .ansible_admin_user_created

- name: Start Postfix service
  docker_compose:
    project_src: "{{ sentry_project_path }}"
    services:
      - postfix
    state: present
    pull: yes
    recreate: smart
  when: sentry_postfix_domain != ""

- name: Wait {{ sentry_postfix_dkim_path }}/dkim.public file
  wait_for:
    path: "{{ sentry_postfix_dkim_path }}/dkim.public"
    state: present
    timeout: 300
  when: sentry_postfix_domain != ""

- name: Fetch {{ sentry_postfix_dkim_path }}/dkim.public to {{ sentry_fetch_dkim_public_key_path }}
  fetch:
    src: "{{ sentry_postfix_dkim_path }}/dkim.public"
    dest: "{{ sentry_fetch_dkim_public_key_path }}"
    flat: yes
  when: sentry_postfix_domain != ""

- name: Start Sentry services (Sentry + Cron + Worker)
  docker_compose:
    project_src: "{{ sentry_project_path }}"
    services:
      - sentry
      - cron
      - worker
    state: present
    pull: yes
    recreate: smart

- name: Upload extract_dsn.py to {{ sentry_project_path }}/extract_dsn.py
  copy:
    src: extract_dsn.py
    dest: "{{ sentry_project_path }}/extract_dsn.py"

- name: Upload display-sentry-dsn.sh to {{ sentry_project_path }}/display-sentry-dsn.sh
  copy:
    src: display-sentry-dsn.sh
    dest: "{{ sentry_project_path }}/display-sentry-dsn.sh"
    mode: 0700

- name: Execute display-sentry-dsn.sh
  command: ./display-sentry-dsn.sh
  args:
    chdir: "{{ sentry_project_path }}"
  changed_when: False
  register: sentry_dsn

- name: Save sentry_dsn value to {{ sentry_fetch_sentry_dsn_path }}
  local_action:
    module: copy
    content: "{{ sentry_dsn.stdout }}"
    dest: "{{ sentry_fetch_sentry_dsn_path }}"
